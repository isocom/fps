/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * 
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * FiscalPrinterApplet.java
 *
 * Created on 2011-10-09, 16:46:02
 */
package name.prokop.bart.fps.applet;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import name.prokop.bart.fps.FiscalPrinter;
import name.prokop.bart.fps.FiscalPrinter.Type;
import name.prokop.bart.fps.datamodel.Slip;
import name.prokop.bart.fps.util.PortEnumerator;
import name.prokop.bart.fps.util.PostClient;

/**
 *
 * @author bart
 */
public class FiscalPrinterConfigApplet extends javax.swing.JApplet {
    
    private String serialPort = "UNSET";
    private FiscalPrinter.Type fiscalPrinterType = FiscalPrinter.Type.BogusFiscalPrinter;
    private String resultURL = "http://natanedwin.appspot.com/stats";

    /**
     * Initializes the applet FiscalPrinterApplet
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FiscalPrinterConfigApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                @Override
                public void run() {
                    try {
                        preinit();
                        initComponents();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                }
            });
        } catch (InterruptedException | InvocationTargetException ex) {
            ex.printStackTrace(System.err);
        }
    }
    
    private void preinit() {
        resultURL = getParameter("ResultURL");
        System.out.println("Zwrotny POST: " + resultURL);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        jButton1.setText("Drukuj paragon 1 gr.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Zapisz konfigurację");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(FiscalPrinter.Type.values()));

        jLabel1.setText("Typ drukarki:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(PortEnumerator.getSerialPortList()));

        jLabel2.setText("Port szeregowy:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    try {
        fiscalPrinterType = (Type) jComboBox1.getSelectedItem();
        serialPort = (String) jComboBox2.getSelectedItem();
        FiscalPrinter fiscalPrinter = fiscalPrinterType.getFiscalPrinter(serialPort);
        fiscalPrinter.print(Slip.getOneCentSlip());
        jButton2.setEnabled(true);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e.getMessage());
    }
}//GEN-LAST:event_jButton1ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Map<String, String> resultMap = new HashMap<>();
        resultMap.put("SerialPort", serialPort);
        resultMap.put("FiscalPrinterType", fiscalPrinterType.name());
        try {
            String result = PostClient.postClient(resultURL, resultMap);
            System.out.println("Wynik wywołania zwrotnego POST:\n" + result);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        javax.swing.JFrame app = new javax.swing.JFrame("Applet Container");
        app.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        app.setSize(800, 480);
        
        FiscalPrinterConfigApplet applet = new FiscalPrinterConfigApplet() {
            // When the local applet version is instantiated
            // we override getParameter and feed it the values we want.
            // This, of course, can also be done be extending the applet
            @Override
            public String getParameter(String name) {
                if (name.equalsIgnoreCase("serverBase")) {
                    return "http://e-dziecko.appspot.com";
                    //return "http://127.0.0.1:8888";
                }
                if (name.equalsIgnoreCase("przedszkoleKeyId")) {
                    // return "1"; // przedszkole Mrowla
                    // return "20001"; // przedszkole Trzciana
                    // return "27146"; // przedszkole Świlcza
                    return "28001"; // TT Soft - testowo
                    // return "29001"; // przedszkole Bratkowice
                }
                if (name.equalsIgnoreCase("SlipURL")) {
                    return "file:///bart/hobby/Slip.json";
                }
                return null;
            }
        };
        // sure to make the applet do its thing
        applet.init();
        app.setLayout(new java.awt.BorderLayout());
        // include it as a component.  local testing can now start
        app.getContentPane().add(applet, java.awt.BorderLayout.CENTER);
        app.setVisible(true);
    }
}
